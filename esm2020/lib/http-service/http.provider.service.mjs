import { HttpErrorResponse, } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { CapacitorHttp, } from '@capacitor/core';
import { isPlatform } from '@ionic/angular';
import { from } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { RequestHeader } from './request-header.enum';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export const MOBILE_APP_HTTP_ORIGIN = new InjectionToken('MOBILE_APP_HTTP_ORIGIN');
export class HttpProvider {
    constructor(_http, mobileAppHttpOrigin) {
        this._http = _http;
        this.mobileAppHttpOrigin = mobileAppHttpOrigin;
        this._cookies = new Map();
        this.isCapacitor = isPlatform('capacitor');
        this.isCapacitor = isPlatform('capacitor');
    }
    buildCapacitorHeaders(method, url) {
        const origin = this.mobileAppHttpOrigin || window.location.origin;
        const header = {
            [RequestHeader.CONTENT_TYPE]: 'application/json',
            // [RequestHeader.ORIGIN]: origin,
            [RequestHeader.X_MOBILE_APP]: 'capacitor',
            [RequestHeader.X_MOBILE_PLATFORM]: isPlatform('ios') ? 'ios' : 'android',
        };
        return header;
    }
    get(url, _options) {
        if (this.isCapacitor) {
            const _url = new URL(url);
            _url.searchParams;
            const options = {
                headers: {
                    ...this.buildCapacitorHeaders('GET', url),
                    ..._options?.headers,
                },
                url,
                params: _options?.params,
            };
            const startTime = new Date();
            return from(CapacitorHttp.get(options)).pipe(map((response) => this.handleCapacitorHttpRequest(response, startTime)), catchError((error) => {
                throw error;
            }));
        }
        return this._http.get(url, _options);
    }
    post(url, body, _options) {
        if (this.isCapacitor) {
            const options = {
                headers: {
                    ...this.buildCapacitorHeaders('POST', url),
                    ..._options?.headers,
                },
                url,
                data: body || undefined,
            };
            const startTime = new Date();
            return from(CapacitorHttp.post(options)).pipe(map((response) => this.handleCapacitorHttpRequest(response, startTime)));
        }
        return this._http.post(url, body, _options);
    }
    handleCapacitorHttpRequest(response, startTime) {
        if (startTime) {
            const endTime = new Date();
            const timeToComplete = endTime.getTime() - startTime.getTime();
            console.log(`Time to complete request ${response.url}: ${timeToComplete}`);
        }
        if (response?.error || response?.status >= 400) {
            const error = typeof response.data === 'string'
                ? JSON.parse(response.data)
                : response.data;
            throw new HttpErrorResponse({
                ...response,
                error,
                url: response.url,
                status: response.status,
                headers: response.headers,
            });
        }
        const headers = response?.headers;
        if (headers) {
            Object.entries(headers).forEach(([key, value]) => {
                if (key.toLowerCase() === 'set-cookie') {
                    this.addCookies(value);
                }
            });
        }
        return response?.data;
    }
    addCookies(cookies) {
        const _cookies = cookies.split(', ');
        _cookies.forEach((cookie) => {
            const [key, value] = cookie.split('=');
            if (value) {
                this._cookies.set(key, value);
            }
        });
    }
    clearCookies() {
        this._cookies.clear();
    }
    get cookies() {
        const cookies = [];
        for (let [key, value] of this._cookies.entries()) {
            cookies.push(`${key}=${value}`);
        }
        return cookies.join('; ');
    }
}
HttpProvider.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: HttpProvider, deps: [{ token: i1.HttpClient }, { token: MOBILE_APP_HTTP_ORIGIN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
HttpProvider.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: HttpProvider, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.10", ngImport: i0, type: HttpProvider, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MOBILE_APP_HTTP_ORIGIN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,